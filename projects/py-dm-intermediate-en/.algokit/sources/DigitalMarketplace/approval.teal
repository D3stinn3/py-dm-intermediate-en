#pragma version 10

smart_contracts.digital_marketplace.contract.DigitalMarketplace.approval_program:
    // smart_contracts/digital_marketplace/contract.py:7
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    method "allow_asset(pay,asset)void"
    method "first_deposit(pay,axfer,uint64,uint64)void"
    method "deposit(axfer,uint64)void"
    method "set_price(uint64,uint64,uint64)void"
    method "withdraw(asset,uint64)void"
    method "buy(address,asset,uint64,pay,uint64)void"
    txna ApplicationArgs 0
    match main_allow_asset_route@2 main_first_deposit_route@3 main_deposit_route@4 main_set_price_route@5 main_withdraw_route@6 main_buy_route@7
    err // reject transaction

main_allow_asset_route@2:
    // smart_contracts/digital_marketplace/contract.py:8
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:7
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/digital_marketplace/contract.py:8
    // @arc4.abimethod
    callsub allow_asset
    int 1
    return

main_first_deposit_route@3:
    // smart_contracts/digital_marketplace/contract.py:21
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:7
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn GroupIndex
    int 2
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/digital_marketplace/contract.py:21
    // @arc4.abimethod
    callsub first_deposit
    int 1
    return

main_deposit_route@4:
    // smart_contracts/digital_marketplace/contract.py:43
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:7
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    // smart_contracts/digital_marketplace/contract.py:43
    // @arc4.abimethod
    callsub deposit
    int 1
    return

main_set_price_route@5:
    // smart_contracts/digital_marketplace/contract.py:56
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:7
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/digital_marketplace/contract.py:56
    // @arc4.abimethod
    callsub set_price
    int 1
    return

main_withdraw_route@6:
    // smart_contracts/digital_marketplace/contract.py:64
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:7
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    // smart_contracts/digital_marketplace/contract.py:64
    // @arc4.abimethod
    callsub withdraw
    int 1
    return

main_buy_route@7:
    // smart_contracts/digital_marketplace/contract.py:79
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:7
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 4
    btoi
    // smart_contracts/digital_marketplace/contract.py:79
    // @arc4.abimethod
    callsub buy
    int 1
    return

main_bare_routing@10:
    // smart_contracts/digital_marketplace/contract.py:7
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.allow_asset(mbr_pay: uint64, asset: uint64) -> void:
allow_asset:
    // smart_contracts/digital_marketplace/contract.py:8-9
    // @arc4.abimethod
    // def allow_asset(self, mbr_pay: gtxn.PaymentTransaction, asset: Asset) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:10
    // assert not Global.current_application_address.is_opted_in(asset)
    global CurrentApplicationAddress
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/digital_marketplace/contract.py:12
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:13
    // assert mbr_pay.amount == Global.asset_opt_in_min_balance
    frame_dig -2
    gtxns Amount
    global AssetOptInMinBalance
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:15-19
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:17
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/digital_marketplace/contract.py:18
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:15
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:15-19
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.first_deposit(mbr_pay: uint64, xfer: uint64, nonce: bytes, unitary_price: bytes) -> void:
first_deposit:
    // smart_contracts/digital_marketplace/contract.py:21-28
    // @arc4.abimethod
    // def first_deposit(
    //     self,
    //     mbr_pay: gtxn.PaymentTransaction,
    //     xfer: gtxn.AssetTransferTransaction,
    //     nonce: arc4.UInt64,
    //     unitary_price: arc4.UInt64,
    // ) -> None:
    proto 4 0
    // smart_contracts/digital_marketplace/contract.py:29
    // assert mbr_pay.sender == Txn.sender
    frame_dig -4
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:30
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -4
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:31
    // assert mbr_pay.amount == FOR_SALE_MBR
    frame_dig -4
    gtxns Amount
    int 28100
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:33
    // box_key = Txn.sender.bytes + op.itob(xfer.xfer_asset.id) + nonce.bytes
    txn Sender
    frame_dig -3
    gtxns XferAsset
    itob
    concat
    frame_dig -2
    concat
    // smart_contracts/digital_marketplace/contract.py:34
    // _length, exists = op.Box.length(box_key)
    dup
    box_len
    bury 1
    // smart_contracts/digital_marketplace/contract.py:35
    // assert not exists
    !
    assert
    // smart_contracts/digital_marketplace/contract.py:37
    // assert xfer.sender == Txn.sender
    frame_dig -3
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:38
    // assert xfer.asset_receiver == Global.current_application_address
    frame_dig -3
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:39
    // assert xfer.asset_amount > 0
    frame_dig -3
    gtxns AssetAmount
    dup
    assert
    // smart_contracts/digital_marketplace/contract.py:41
    // op.Box.put(box_key, op.itob(xfer.asset_amount) + unitary_price.bytes)
    itob
    frame_dig -1
    concat
    box_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.deposit(xfer: uint64, nonce: bytes) -> void:
deposit:
    // smart_contracts/digital_marketplace/contract.py:43-44
    // @arc4.abimethod
    // def deposit(self, xfer: gtxn.AssetTransferTransaction, nonce: arc4.UInt64) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:45
    // box_key = Txn.sender.bytes + op.itob(xfer.xfer_asset.id) + nonce.bytes
    txn Sender
    frame_dig -2
    gtxns XferAsset
    itob
    concat
    frame_dig -1
    concat
    // smart_contracts/digital_marketplace/contract.py:46
    // _length, exists = op.Box.length(box_key)
    dup
    box_len
    bury 1
    // smart_contracts/digital_marketplace/contract.py:47
    // assert exists
    assert
    // smart_contracts/digital_marketplace/contract.py:49
    // assert xfer.sender == Txn.sender
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:50
    // assert xfer.asset_receiver == Global.current_application_address
    frame_dig -2
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:51
    // assert xfer.asset_amount > 0
    frame_dig -2
    gtxns AssetAmount
    dup
    assert
    // smart_contracts/digital_marketplace/contract.py:53
    // current_deposited = op.btoi(op.Box.extract(box_key, 0, 8))
    dig 1
    int 0
    int 8
    box_extract
    btoi
    // smart_contracts/digital_marketplace/contract.py:54
    // op.Box.replace(box_key, 0, op.itob(current_deposited + xfer.asset_amount))
    +
    itob
    int 0
    swap
    box_replace
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.set_price(asset: uint64, nonce: bytes, unitary_price: bytes) -> void:
set_price:
    // smart_contracts/digital_marketplace/contract.py:56-59
    // @arc4.abimethod
    // def set_price(
    //     self, asset: UInt64, nonce: arc4.UInt64, unitary_price: arc4.UInt64
    // ) -> None:
    proto 3 0
    // smart_contracts/digital_marketplace/contract.py:60
    // box_key = Txn.sender.bytes + op.itob(asset) + nonce.bytes
    txn Sender
    frame_dig -3
    itob
    concat
    frame_dig -2
    concat
    // smart_contracts/digital_marketplace/contract.py:62
    // op.Box.replace(box_key, 8, unitary_price.bytes)
    int 8
    frame_dig -1
    box_replace
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.withdraw(asset: uint64, nonce: bytes) -> void:
withdraw:
    // smart_contracts/digital_marketplace/contract.py:64-65
    // @arc4.abimethod
    // def withdraw(self, asset: Asset, nonce: arc4.UInt64) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:66
    // box_key = Txn.sender.bytes + op.itob(asset.id) + nonce.bytes
    txn Sender
    frame_dig -2
    itob
    concat
    frame_dig -1
    concat
    // smart_contracts/digital_marketplace/contract.py:68
    // current_deposited = op.btoi(op.Box.extract(box_key, 0, 8))
    dup
    int 0
    int 8
    box_extract
    btoi
    swap
    // smart_contracts/digital_marketplace/contract.py:69
    // _deleted = op.Box.delete(box_key)
    box_del
    pop
    // smart_contracts/digital_marketplace/contract.py:71
    // itxn.Payment(receiver=Txn.sender, amount=FOR_SALE_MBR).submit()
    itxn_begin
    txn Sender
    int 28100
    itxn_field Amount
    itxn_field Receiver
    int pay
    itxn_field TypeEnum
    itxn_submit
    // smart_contracts/digital_marketplace/contract.py:73-77
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Txn.sender,
    //     asset_amount=current_deposited,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:75
    // asset_receiver=Txn.sender,
    txn Sender
    itxn_field AssetReceiver
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:73
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:73-77
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Txn.sender,
    //     asset_amount=current_deposited,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy(owner: bytes, asset: uint64, nonce: bytes, buy_pay: uint64, quantity: uint64) -> void:
buy:
    // smart_contracts/digital_marketplace/contract.py:79-87
    // @arc4.abimethod
    // def buy(
    //     self,
    //     owner: arc4.Address,
    //     asset: Asset,
    //     nonce: arc4.UInt64,
    //     buy_pay: gtxn.PaymentTransaction,
    //     quantity: UInt64,
    // ) -> None:
    proto 5 0
    // smart_contracts/digital_marketplace/contract.py:88
    // box_key = owner.bytes + op.itob(asset.id) + nonce.bytes
    frame_dig -4
    itob
    frame_dig -5
    swap
    concat
    frame_dig -3
    concat
    // smart_contracts/digital_marketplace/contract.py:90
    // current_unitary_price = op.btoi(op.Box.extract(box_key, 8, 8))
    dup
    int 8
    dup
    box_extract
    btoi
    // smart_contracts/digital_marketplace/contract.py:91-93
    // amount_not_scaled_high, amount_not_scaled_low = op.mulw(
    //     current_unitary_price, quantity
    // )
    frame_dig -1
    mulw
    swap
    // smart_contracts/digital_marketplace/contract.py:94
    // scaling_factor_high, scaling_factor_low = op.expw(10, asset.decimals)
    frame_dig -4
    asset_params_get AssetDecimals
    assert // asset exists
    int 10
    swap
    expw
    swap
    // smart_contracts/digital_marketplace/contract.py:95-100
    // _quotient_high, amount_to_be_paid, _remainder_high, _remainder_low = op.divmodw(
    //     amount_not_scaled_high,
    //     amount_not_scaled_low,
    //     scaling_factor_high,
    //     scaling_factor_low,
    // )
    uncover 2
    uncover 3
    uncover 2
    uncover 3
    divmodw
    popn 2
    swap
    // smart_contracts/digital_marketplace/contract.py:101
    // assert not _quotient_high
    !
    assert
    // smart_contracts/digital_marketplace/contract.py:103
    // assert buy_pay.sender == Txn.sender
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:104
    // assert buy_pay.receiver.bytes == owner.bytes
    frame_dig -2
    gtxns Receiver
    frame_dig -5
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:105
    // assert buy_pay.amount == amount_to_be_paid
    frame_dig -2
    gtxns Amount
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:107
    // current_deposited = op.btoi(op.Box.extract(box_key, 0, 8))
    dup
    int 0
    int 8
    box_extract
    btoi
    // smart_contracts/digital_marketplace/contract.py:108
    // op.Box.replace(box_key, 0, op.itob(current_deposited - quantity))
    frame_dig -1
    -
    itob
    int 0
    swap
    box_replace
    // smart_contracts/digital_marketplace/contract.py:110-114
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:112
    // asset_receiver=Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    frame_dig -4
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:110
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:110-114
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_submit
    retsub